import mongoose from 'mongoose'

// MongoDBËøûÊé•ÈÖçÁΩÆ
const connectDB = async () => {
  try {
    // ‰ΩøÁî®‰Ω†Êèê‰æõÁöÑMongoDB AtlasËøûÊé•Â≠óÁ¨¶‰∏≤
    const mongoUri = process.env.MONGODB_URI || 'mongodb+srv://jiongzhengwu_db_user:Gjz53234@cluster0.k27mifi.mongodb.net/oilpainting?retryWrites=true&w=majority&appName=Cluster0'
    
    // ËøûÊé•ÈÄâÈ°π
    const options = {
      maxPoolSize: 10, // Áª¥Êä§ÊúÄÂ§ö10‰∏™socketËøûÊé•
      serverSelectionTimeoutMS: 5000, // 5ÁßíÂêéË∂ÖÊó∂
      socketTimeoutMS: 45000, // 45ÁßíÂêéÂÖ≥Èó≠socket
      bufferCommands: false, // Á¶ÅÁî®mongooseÁºìÂÜ≤
    }

    await mongoose.connect(mongoUri, options)
    
    console.log('‚úÖ MongoDB connected successfully')
    console.log('üìä Connected to database:', mongoose.connection.name)
    console.log('üåê Host:', mongoose.connection.host)
    console.log('üîå Port:', mongoose.connection.port)
    
    // ÁõëÂê¨ËøûÊé•‰∫ã‰ª∂
    mongoose.connection.on('error', (err) => {
      console.error('‚ùå MongoDB connection error:', err)
    })
    
    mongoose.connection.on('disconnected', () => {
      console.log('‚ö†Ô∏è MongoDB disconnected')
    })
    
    mongoose.connection.on('reconnected', () => {
      console.log('üîÑ MongoDB reconnected')
    })
    
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error.message)
    process.exit(1)
  }
}

// ‰ºòÈõÖÂÖ≥Èó≠Êï∞ÊçÆÂ∫ìËøûÊé•
const closeDB = async () => {
  try {
    await mongoose.connection.close()
    console.log('üîí MongoDB connection closed')
  } catch (error) {
    console.error('‚ùå Error closing MongoDB connection:', error.message)
  }
}

export { connectDB, closeDB }
